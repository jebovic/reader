{% extends "ReaderAdminBundle::layout.html.twig" %}

{% block header %}
    {% set active = 'dashboard' %}
    {{ parent() }}
{% endblock %}

{% block content %}
    <div class="container">
        <h1>Welcome to the Reader admin Sandbox <small> Source creation wizard</small></h1>
        <div class="row">
            {% if not frameUrl %}
                <div class="span12">
                    <form action="{{ path('reader_admin_sandbox') }}" method="post">
                        <div class="input-append controls controls-row">
                            <input type="text" name="frameUrl" class="span10" />
                            <button type="submit" class="btn btn-primary">Continuer !</button>
                        </div>
                    </form>
                </div>
            {% else %}
                <iframe id="testIframe" name="testFrame" src="{{ path('reader_admin_iframe', { frameUrl: frameUrl }) }}" frameborder="0" width="100%" height="10000"></iframe>
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block javascript %}
    {{ parent() }}
    <script src="{{ asset("bundles/readeradmin/js/jquery.dom.path.js") }}"></script>
    <script type="text/javascript">
        (function($){

            $.clonerlay = function(el, options){
                var base = this;
                base.$el = $(el);
                base.el  = el;

                base.$el.data("clonerlay", base);

                base.init = function(){
                    base.options = $.extend({},$.clonerlay.defaultOptions, options);
                    if ( base.options.autoClone === true )
                    {
                        base.clone = base.createClone();
                        base.clone.prependTo( $('body') );
                    }
                    if ( $.clonerlay.firstInit === true )
                    {
                        $.clonerlay.firstInit = false;
                        $.pnotify({
                            type: "success",
                            text: "Sandbox launched"
                        });$
                    }
                };

                base.removeClone = function()
                {
                    if ( base.clone )
                    {
                        base.clone.remove();
                        base.clone = null;
                        $.clonerlay.createCloneOnMouseOver = true;
                    }
                };

                base.createClone = function()
                {
                    var clone = $('<div/>');

                    clone.click( function(e){
                        interceptEvent(e);

                        if ( base.clone.attr('data-clonerlay-selected') == 'false' )
                        {
                            $.clonerlay.createCloneOnMouseOver = false;
                            base.clone.attr('data-clonerlay-selected', true);
                            base.clone.css('background', 'rgba(0,220,50,0.4)');
                            if ( base.options.exploration === true ) {
                                var siblings = base.$el.findSiblings();
                                if ( siblings !== null ) {
                                    siblings.clonerlay({
                                        container:   base.options.container,
                                        exploration: false,
                                        autoClone:   true
                                    });
                                    $.pnotify( finalPath );
                                }
                            }
                            return true;
                        }
                        base.removeClone();

                        return true;
                    });

                    var cloneCss = $.extend({}, {
                        width:  base.$el.outerWidth(),
                        height: base.$el.outerHeight(),
                        top:    null === base.options.container ? base.$el.offset().top : base.$el.offset().top + base.options.container.offset().top,
                        left:   null === base.options.container ? base.$el.offset().left : base.$el.offset().left + base.options.container.offset().left
                    }, base.options.clone);

                    clone.attr('data-clonerlay-selected', false);

                    clone.css( cloneCss );
                    clone.attr('data-from-path', base.$el.getDomPath());

                    return clone;
                };

                base.$el.on('mouseover', function(e){
                    if ( $.clonerlay.createCloneOnMouseOver === true )
                    {
                        interceptEvent(e);
                        base.clone = base.createClone();
                        base.clone.prependTo( $('body') );
                    }
                });

                base.$el.on('mouseout', function(e){
                    if ( $.clonerlay.createCloneOnMouseOver === true ) {
                        interceptEvent(e);
                        base.removeClone();
                    }
                });

                base.$el.click( function(e){
                    interceptEvent(e);

                    return true;
                });

                base.init();
            };

            $.clonerlay.firstInit = true;

            $.clonerlay.createCloneOnMouseOver = true;

            $.clonerlay.defaultOptions = {
                clone: {
                    position:   'absolute',
                    background: 'rgba(0,200,200, 0.4)',
                    margin:     '0 0 0 0',
                    padding:    '0 0 0 0',
                    "z-index":    '1020'
                },
                container: null,
                exploration: false,
                autoClone: false
            };

            var maxSiblingsLoops = 20;
            var loopLocker = 0;
            var finalPath = '';

            $.fn.findSiblings = function(){
                var origin      = $(this),
                    tagName     = origin.getTagName(),
                    minSiblings = 4;
                loopLocker++;

                if ( origin.attr('class') !== undefined ) {
                    var classPath = '.' + origin.attr('class').trim().split(/\s+/).join('.');
                    console.log(classPath);

                    if ( classPath !== '.' && classPath !== '..' )
                    {
                        var firstTry  = origin.closest('body').find(classPath !== '.' ? tagName + classPath : tagName);

                        if ( firstTry.length >= ( minSiblings * 2 ) )
                        {
                            finalPath = 'body ' + classPath;
                            return firstTry;
                        }
                    }

                    var classList = origin.attr('class').split(/\s+/);
                    if ( classList.length ) {
                        for (var i = 0; i < classList.length; i++) {
                            var className = classList[i];
                            if ( origin.siblings('.' + className).length >= minSiblings )
                            {
                                finalPath = origin.parent().getDomPath() + ' > .' + className;
                                return origin.siblings('.' + className);
                            }
                        }
                    }
                }
                if ( origin.siblings().length >= minSiblings )
                {
                    finalPath = origin.getDomPath();
                    return origin.siblings();
                } else {
                    return loopLocker > maxSiblingsLoops ? null : null;//origin.parent().findSiblings();
                }
            };

            $.fn.getTagName = function() {
                return this.prop("tagName").toLowerCase();
            };

            $.fn.clonerlay = function(options){
                return this.each(function(){
                    (new $.clonerlay(this, options));
                });
            };

        })(jQuery);
        function interceptEvent(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        jQuery(document).ready(function($) {
            $('#testIframe').load(function() {
                var iframeContent = $('#testIframe').contents();
                iframeContent.find('body > * > * div, body > * > * section, body > * > * article, body > * > * li').not('.row, .container').clonerlay({
                    container: $('#testIframe'),
                    exploration: true
                });
            });
        });
    </script>
{% endblock %}